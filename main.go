package main

import (
	"encoding/json"
	"flag"
	"log"
	"os"
	"path/filepath"
)

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é repository (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç embedded/–≤–Ω–µ—à–Ω–∏–µ —Ñ–∞–π–ª—ã)
	l := GetLocalization()

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ debug —Ä–µ–∂–∏–º–µ
	if os.Getenv("CRIAGE_DEBUG") == "1" {
		embeddedLangs := GetEmbeddedRepositoryLanguages()
		if len(embeddedLangs) > 0 {
			log.Printf("üöÄ Repository: –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã: %v", embeddedLangs)
		} else {
			log.Printf("üìÅ Repository: –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤–Ω–µ—à–Ω–∏–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤: %v", l.GetSupportedLanguages())
		}
	}

	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	configPath := flag.String("config", "config.json", "Path to configuration file")
	flag.Parse()

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	config, err := loadConfig(*configPath)
	if err != nil {
		log.Fatalf("Failed to load config: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	if err := createDirectories(config); err != nil {
		log.Fatalf("Failed to create directories: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–¥–µ–∫—Å–∞
	indexManager, err := NewIndexManager(config)
	if err != nil {
		log.Fatalf("Failed to create index manager: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º upload token –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	uploadToken := os.Getenv("CRIAGE_UPLOAD_TOKEN")
	// –°–æ–∑–¥–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
	apiServer := NewApiServer(indexManager, config, uploadToken)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	log.Fatal(apiServer.Start())
}

// loadConfig –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞
func loadConfig(configPath string) (*Config, error) {
	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç common/config.ServerConfig)
	config := &Config{
		Host:        "0.0.0.0",
		Port:        8080,
		StoragePath: "./packages",
		IndexPath:   "./index.json",
		AuthEnabled: false,
		MaxFileSize: 100 * 1024 * 1024, // 100MB
		AllowedFormats: []string{
			"criage", "tar.zst", "tar.lz4", "tar.xz", "tar.gz", "zip",
		},
		RateLimit:   0,
		LogLevel:    "info",
		CORSEnabled: true,
		CORSOrigins: []string{"*"},
	}

	// –ï—Å–ª–∏ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
	if _, err := os.Stat(configPath); err == nil {
		data, err := os.ReadFile(configPath)
		if err != nil {
			return nil, err
		}

		if err := json.Unmarshal(data, config); err != nil {
			return nil, err
		}
	} else {
		// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		log.Printf("Creating default config at %s", configPath)
		data, err := json.MarshalIndent(config, "", "  ")
		if err != nil {
			return nil, err
		}

		if err := os.WriteFile(configPath, data, 0644); err != nil {
			return nil, err
		}
	}

	return config, nil
}

// createDirectories —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
func createDirectories(config *Config) error {
	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–∞–∫–µ—Ç–æ–≤
	if err := os.MkdirAll(config.StoragePath, 0755); err != nil {
		return err
	}

	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
	webDir := "./web"
	if err := os.MkdirAll(webDir, 0755); err != nil {
		return err
	}

	// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π index.html –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
	indexHTML := filepath.Join(webDir, "index.html")
	if _, err := os.Stat(indexHTML); os.IsNotExist(err) {
		html := `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Criage Package Repository</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        h1 { color: #333; }
        .info { background: #f5f5f5; padding: 20px; border-radius: 5px; }
        .api-endpoint { margin: 10px 0; }
        .method { font-weight: bold; color: #007bff; }
        code { background: #e9ecef; padding: 2px 4px; border-radius: 3px; }
    </style>
</head>
<body>
    <h1>üöÄ Criage Package Repository</h1>
    
    <div class="info">
        <h2>API Endpoints</h2>
        
        <div class="api-endpoint">
            <span class="method">GET</span> <code>/api/v1/</code> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        </div>
        
        <div class="api-endpoint">
            <span class="method">GET</span> <code>/api/v1/packages</code> - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞–∫–µ—Ç–æ–≤
        </div>
        
        <div class="api-endpoint">
            <span class="method">GET</span> <code>/api/v1/packages/{name}</code> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ
        </div>
        
        <div class="api-endpoint">
            <span class="method">GET</span> <code>/api/v1/search?q={query}</code> - –ü–æ–∏—Å–∫ –ø–∞–∫–µ—Ç–æ–≤
        </div>
        
        <div class="api-endpoint">
            <span class="method">GET</span> <code>/api/v1/download/{name}/{version}/{file}</code> - –°–∫–∞—á–∞—Ç—å –ø–∞–∫–µ—Ç
        </div>
        
        <div class="api-endpoint">
            <span class="method">POST</span> <code>/api/v1/upload</code> - –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞–∫–µ—Ç (—Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω)
        </div>
    </div>

    <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
    <div id="stats">–ó–∞–≥—Ä—É–∑–∫–∞...</div>

    <script>
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        fetch('/api/v1/')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById('stats').innerHTML = 
                        '<p><strong>–í—Å–µ–≥–æ –ø–∞–∫–µ—Ç–æ–≤:</strong> ' + data.data.total_packages + '</p>' +
                        '<p><strong>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</strong> ' + new Date(data.data.last_updated).toLocaleString() + '</p>' +
                        '<p><strong>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</strong> ' + data.data.formats.join(', ') + '</p>';
                }
            })
            .catch(error => {
                document.getElementById('stats').innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</p>';
            });
    </script>
</body>
</html>`
		if err := os.WriteFile(indexHTML, []byte(html), 0644); err != nil {
			return err
		}
	}

	return nil
}
